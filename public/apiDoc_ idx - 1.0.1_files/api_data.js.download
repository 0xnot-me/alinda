define({ "api": [
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.8.0",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.7.0",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.6.0",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.5.0",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.4.0",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.3.0",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.2.3",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/apiversion",
    "title": "apiversion GET",
    "version": "1.2.2",
    "name": "apiversion",
    "group": "Clients",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "delete",
    "url": "/clients/widgets-legacy/batch",
    "title": "widgets-legacy/batch DELETE",
    "version": "1.8.0",
    "name": "deleteBatchLegacyWidgetsData",
    "group": "Clients",
    "description": "<p>Delete many legacy javascript widgets from the user's account.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "batch",
            "description": "<p>To delete the widgets in batch.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets-legacy/batch\n// Note: For batch deletes, a JSON object must be supplied as POST data,\n// containing the ids you wish to delete.\n// PHP Example:\n$data = [\n 'ids' => [1, 2, 3]\n];\n$data = json_encode($data); // Encode as JSON, then include as body of request.",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of deleted IDs.\"\n{\n \"deleted\": [ 1, 2 ],\n \"not-found\": [ 3, 4 ]\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Required 'ids' field is missing or all given IDs are invalid.\"\nHTTP/1.1 500 \"Failure to delete the widgets will result in a 500 error.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "delete",
    "url": "/clients/widgets/batch",
    "title": "widgets/batch DELETE",
    "version": "1.8.0",
    "name": "deleteBatchWidgetsData",
    "group": "Clients",
    "description": "<p>Delete many non-legacy javascript widgets from the user's account.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "batch",
            "description": "<p>To delete the widgets in batch.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets/batch\n// Note: For batch deletes, a JSON object must be supplied as POST data,\n// containing the ids you wish to delete.\n// PHP Example:\n$data = [\n 'ids' => [1, 2, 3]\n];\n$data = json_encode($data); // Encode as JSON, then include as body of request.",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of deleted IDs.\"\n{\n \"deleted\": [ 1, 2 ],\n \"not-found\": [ 3, 4 ]\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Required 'ids' field is missing or all given IDs are invalid.\"\nHTTP/1.1 500 \"Failure to delete the widgets will result in a 500 error.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "delete",
    "url": "/clients/widgets-legacy/{id}",
    "title": "widgets-legacy/{id} DELETE",
    "version": "1.8.0",
    "name": "deleteLegacyWidgetData",
    "group": "Clients",
    "description": "<p>Delete a single legacy javascript widget from the users account.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "id",
            "description": "<p>The legacy widget ID.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets-legacy/1234",
        "type": "json"
      }
    ],
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid widget ID will result in a 400 error.\"\nHTTP/1.1 500 \"Failure to delete the widget.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.8.0",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.7.0",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.6.0",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.5.0",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.4.0",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.3.0",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.2.3",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.2.2",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.2.1",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.2.0",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/savedlinks",
    "title": "savedlinks DELETE",
    "version": "1.1.1",
    "name": "deleteSavedlinks",
    "group": "Clients",
    "description": "<p>Remove a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1",
        "type": "json"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/subheaders",
    "title": "subheaders DELETE",
    "version": "1.8.0",
    "name": "deleteSubheaders",
    "group": "Clients",
    "description": "<p>Remove a client's subheader <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of subheaders.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/subheaders/123",
        "type": "json"
      },
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/subheaders/batch\n// Note: For batch deletes, a JSON object must be supplied as POST data,\n// containing the ids you wish to delete.\n// PHP Example:\n$data = [\n 'ids' => [1, 2, 3]\n];\n$data = json_encode($data); // Encode as JSON, then include as body of request.",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "subheaderID",
            "description": "<p>The id of a subheader.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n{\n \"deleted\": [\n   \"1\",\n   \"2\"\n ],\n \"not-found\": [\n   \"3\"\n ]\n}",
          "type": "json"
        },
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid or missing ID(s) will result in 400 error\".\nHTTP/1.1 500 \"Failure to delete the widget.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.8.0",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.7.0",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.6.0",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.5.0",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.4.0",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.3.0",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.2.3",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.2.2",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.2.1",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.2.0",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/supplemental",
    "title": "supplemental DELETE",
    "version": "1.1.1",
    "name": "deleteSupplemental",
    "group": "Clients",
    "description": "<p>Remove a clients supplemental property. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of supplemental properties.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The listingID of a supplmental property.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/widgets/{id}",
    "title": "widgets/{id} DELETE",
    "version": "1.8.0",
    "name": "deleteWidgetData",
    "group": "Clients",
    "description": "<p>Delete a single non-legacy javascript widget from the user's account.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "id",
            "description": "<p>The widget ID.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets/1234",
        "type": "json"
      }
    ],
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid widget ID.\"\nHTTP/1.1 500 \"Failure to delete the widget will result in a 500 error.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "get",
    "url": "/clients/accountinfo",
    "title": "accountinfo GET",
    "version": "1.8.0",
    "name": "getAccountInfo",
    "group": "Clients",
    "description": "<p>Get client account information.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Client account information.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accountinfo",
    "title": "accountinfo GET",
    "version": "1.7.0",
    "name": "getAccountInfo",
    "group": "Clients",
    "description": "<p>Get client account information.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Client account information.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accountinfo",
    "title": "accountinfo GET",
    "version": "1.6.0",
    "name": "getAccountInfo",
    "group": "Clients",
    "description": "<p>Get client account information.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Client account information.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accountinfo",
    "title": "accountinfo GET",
    "version": "1.5.0",
    "name": "getAccountInfo",
    "group": "Clients",
    "description": "<p>Get client account information.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Client account information.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.8.0",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.7.0",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.6.0",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.5.0",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.4.0",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.3.0",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.2.3",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.2.2",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.2.1",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.2.0",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.1.1",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/accounttype",
    "title": "accounttype GET",
    "version": "1.0.4",
    "name": "getAccounttypes",
    "group": "Clients",
    "description": "<p>Get your account type.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"account type\":",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.8.0",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.7.0",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.6.0",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.5.0",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.4.0",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.3.0",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.2.3",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.2.2",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.2.1",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.2.0",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.1.1",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountCreated - the date/time the agent was added to our system.\"",
              "\"lastLoginDate - the last time the agent logged in to their account.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an agent, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/agents",
    "title": "agents GET",
    "version": "1.0.4",
    "name": "getAgents",
    "group": "Clients",
    "description": "<p>View agent information on a multi-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/agents?filterField=agentID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"agentID - The IDX assigned agent ID\"",
              "\"officeID - The IDX assigned office ID\"",
              "\"category - The agent category\"",
              "\"language - The defined language settings\"",
              "\"agentName - The agent name\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All agents on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.8.0",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.7.0",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.6.0",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.5.0",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.4.0",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.3.0",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.2.3",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.2.2",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.2.1",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.2.0",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.1.1",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities",
    "title": "cities GET",
    "version": "1.0.4",
    "name": "getCities",
    "group": "Clients",
    "description": "<p>Returns the cities available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.8.0",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.7.0",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.6.0",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.5.0",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.4.0",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.3.0",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.2.3",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.2.2",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.2.1",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.2.0",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.1.1",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/citieslistname",
    "title": "citieslistname GET",
    "version": "1.0.4",
    "name": "getCitieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's city lists including MLS city lists. To get the list of all city lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /> <strong>Note: This method was previously camelcased as &quot;citiesListName&quot; but was made lower case to fit the API naming convention. Calls to &quot;citiesListName&quot; will be forwarded to &quot;citieslistname&quot; and &quot;citiesListName&quot; is listed as deprecated in the method list.</strong></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.8.0",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.7.0",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.6.0",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.5.0",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.4.0",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.3.0",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.2.3",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.2.2",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.2.1",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.2.0",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.1.1",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties",
    "title": "counties GET",
    "version": "1.0.4",
    "name": "getCounties",
    "group": "Clients",
    "description": "<p>Returns the counties available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.8.0",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.7.0",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.6.0",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.5.0",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.4.0",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.3.0",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.2.3",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/countieslistname",
    "title": "countieslistname GET",
    "version": "1.2.2",
    "name": "getCountieslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's counties lists including MLS counties lists. To get the list of all counties lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of counties list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.8.0",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns all the information for the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.7.0",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns all the information for the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.6.0",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.5.0",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.4.0",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.3.0",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.2.3",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.2.2",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.2.1",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.2.0",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.1.1",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/featured",
    "title": "featured GET",
    "version": "1.0.4",
    "name": "getFeatured",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's featured (active) properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/featured",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Featured properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgets-legacy/{id}",
    "title": "widgets-legacy/{id} GET",
    "version": "1.8.0",
    "name": "getLegacyWidgetData",
    "group": "Clients",
    "description": "<p>Gather a single legacy javascript widget and it's settings. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "id",
            "description": "<p>The legacy widget ID.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets-legacy/1234?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID, URL, and options for a single legacy javascript widget that has been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid widget ID will result in 400 error\".",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/widgets-legacy",
    "title": "widgets-legacy GET",
    "version": "1.8.0",
    "name": "getLegacyWidgetsData",
    "group": "Clients",
    "description": "<p>Gathers all the legacy javascript widgets currently on the user's account. These widgets can then be placed on the user's main site via the included URLs.<br /><br /> <strong>Note: This method replaces the &quot;widgetsrc&quot; method. Calls to that endpoint will be forwarded here and &quot;widgetsrc&quot; is listed as deprecated in the methods list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets-legacy?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID, URL, and options for all legacy javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.8.0",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.7.0",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.6.0",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.5.0",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.4.0",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.3.0",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.3",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.2",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.1",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.0",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.1.1",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listcomponents",
    "title": "listcomponents GET",
    "version": "1.0.4",
    "name": "getListcomponents",
    "group": "Clients",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.8.0",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.7.0",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.6.0",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.5.0",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.4.0",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.3.0",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.2.3",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.2.2",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.2.1",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.2.0",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.1.1",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123&interval=24&startDatetime=2015-01-01+23:59:59&dateType=accountCreated",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"accountCreated - the date/time the office was added to our system.\"",
              "\"lastUpdate - the date/time the office information was updated.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with an office, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offices",
    "title": "offices GET",
    "version": "1.0.4",
    "name": "getOffices",
    "group": "Clients",
    "description": "<p>View all offices on a mutli-user account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offices?filterField=officeID&filterValue=123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"officeID - The IDX assigned office ID\"",
              "\"stateprovince - The state or province that the office(s) are in\"",
              "\"zipcode - The zip code that the office(s) are in\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All offices on the account or those matching filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/offmarket",
    "title": "offmarket GET",
    "version": "1.8.0",
    "name": "getOffmarket",
    "group": "Clients",
    "description": "<p>Returns all the information for the client's off market properties</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/offmarket?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Off market properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.8.0",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.7.0",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.6.0",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.5.0",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.4.0",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.3.0",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.2.3",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes",
    "title": "postalcodes GET",
    "version": "1.2.2",
    "name": "getPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.8.0",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.7.0",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.6.0",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.5.0",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.4.0",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.3.0",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.2.3",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodeslistname",
    "title": "postalcodeslistname GET",
    "version": "1.2.2",
    "name": "getPostalcodeslistname",
    "group": "Clients",
    "description": "<p>Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists. To get the list of all postal code lists available do not send the primary request ID. The default list on each account has the ID combinedActiveMLS <br/><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of city list IDs and names\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.8.0",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.7.0",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.6.0",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.5.0",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.4.0",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.3.0",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.2.3",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.2.2",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.2.1",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.2.0",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.1.1",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the saved link was added to our system\""
            ],
            "optional": true,
            "field": "dateType",
            "description": ""
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks",
    "title": "savedlinks GET",
    "version": "1.0.4",
    "name": "getSavedlinks",
    "group": "Clients",
    "description": "<p>Get saved links for a given client account.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All saved links on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks/{savedLinkID}/count",
    "title": "savedlinks/{savedLinkID}/count GET",
    "version": "1.8.0",
    "name": "getSavedlinksTotalPropertyCount",
    "group": "Clients",
    "description": "<p>Get total property count for a saved link.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinkID",
            "description": "<p>The saved link ID.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "count",
            "description": "<p>To return total property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Total property count for the given saved link ID.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks/{savedLinkID}/count",
    "title": "savedlinks/{savedLinkID}/count GET",
    "version": "1.7.0",
    "name": "getSavedlinksTotalPropertyCount",
    "group": "Clients",
    "description": "<p>Get total property count for a saved link.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinkID",
            "description": "<p>The saved link ID.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "count",
            "description": "<p>To return total property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Total property count for the given saved link ID.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks/{savedLinkID}/count",
    "title": "savedlinks/{savedLinkID}/count GET",
    "version": "1.6.0",
    "name": "getSavedlinksTotalPropertyCount",
    "group": "Clients",
    "description": "<p>Get total property count for a saved link.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinkID",
            "description": "<p>The saved link ID.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "count",
            "description": "<p>To return total property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Total property count for the given saved link ID.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/savedlinks/{savedLinkID}/count",
    "title": "savedlinks/{savedLinkID}/count GET",
    "version": "1.5.0",
    "name": "getSavedlinksTotalPropertyCount",
    "group": "Clients",
    "description": "<p>Get total property count for a saved link.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinkID",
            "description": "<p>The saved link ID.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "count",
            "description": "<p>To return total property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Total property count for the given saved link ID.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities/sold",
    "title": "cities/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataCities",
    "group": "Clients",
    "description": "<p>Returns the cities (limited to sold data) available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities/sold",
    "title": "cities/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataCities",
    "group": "Clients",
    "description": "<p>Returns the cities (limited to sold data) available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/cities/sold",
    "title": "cities/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataCities",
    "group": "Clients",
    "description": "<p>Returns the cities (limited to sold data) available in each of a client's city lists. Since a client can build any number of city lists this method requires the ID of which list you want to view. To get a list of all city lists available do not send the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/cities/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All cities in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties/sold",
    "title": "counties/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataCounties",
    "group": "Clients",
    "description": "<p>Returns the counties (limited to sold data) available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties/sold",
    "title": "counties/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataCounties",
    "group": "Clients",
    "description": "<p>Returns the counties (limited to sold data) available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/counties/sold",
    "title": "counties/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataCounties",
    "group": "Clients",
    "description": "<p>Returns the counties (limited to sold data) available in each of a client's county lists. Since a client can build any number of county lists this method requires the ID of which list you want to view. To get a list of all county lists available do not send the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/counties/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All counties in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes/sold",
    "title": "postalcodes/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes (limited to sold data) available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes/sold",
    "title": "postalcodes/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes (limited to sold data) available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/postalcodes/sold",
    "title": "postalcodes/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataPostalcodes",
    "group": "Clients",
    "description": "<p>Returns the postalcodes (limited to sold data) available in each of a client's postalcode lists. Since a client can build any number of postalcode lists this method requires the ID of which list you want to view. To get a list of all postalcode lists available do not send the primary request ID. <strong>Note: This method was previously called as &quot;zipcodes&quot; but was changed to keep API format more international. Calls to &quot;zipcodes&quot; will be forwarded to &quot;postalcodes&quot; and &quot;zipcodes&quot; is listed as deprecated in the method list.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/postalcodes/sold/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All postalcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.8.0",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns all the information for the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.7.0",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns all the information for the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.6.0",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.5.0",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.4.0",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.3.0",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.2.3",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.2.2",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.2.1",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.2.0",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.1.1",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/soldpending",
    "title": "soldpending GET",
    "version": "1.0.4",
    "name": "getSoldpending",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's sold and pending properties. That is, those that have been removed from their MLS data.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/soldpending",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Sold/pending properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/subheaders/{subheaderID}",
    "title": "subheaders/{id} GET",
    "version": "1.8.0",
    "name": "getSubheaderData",
    "group": "Clients",
    "description": "<p>Get a single client subheader.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/subheaders/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "subheaderID",
            "description": "<p>The id of a subheader.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n{\n \"id\": 123,\n \"type\": \"page\",\n \"category\": \"\",\n \"pageID\": 1,\n \"subheader\": \"<p>Subheader<\\/p>\"\n}",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/subheaders",
    "title": "subheaders GET",
    "version": "1.8.0",
    "name": "getSubheadersData",
    "group": "Clients",
    "description": "<p>Get all client subheaders.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/subheaders",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n[\n {\n   \"id\": 123,\n   \"type\": \"page\",\n   \"category\": \"\",\n   \"pageID\": 1,\n   \"subheader\": \"<p>Subheader<\\/p>\"\n },\n {\n   \"id\": 124,\n   \"type\": \"page\",\n   \"category\": \"\",\n   \"pageID\": 2,\n   \"subheader\": \"<p>Subheader<\\/p>\"\n  },\n]",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.8.0",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.7.0",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.6.0",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.5.0",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.4.0",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.3.0",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.2.3",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.2.2",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.2.1",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.2.0",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.1.1",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/supplemental",
    "title": "supplemental GET",
    "version": "1.0.4",
    "name": "getSupplemental",
    "group": "Clients",
    "description": "<p>Returns a basic set of information for all of the client's supplemental (non-MLS) properties.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/supplemental",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Supplemental properties on the account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.8.0",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.7.0",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.6.0",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.5.0",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.4.0",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.3.0",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.2.3",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.2.2",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.2.1",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.2.0",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK\n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\"\n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\"\n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.1.1",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\" \n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\" \n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/systemlinks",
    "title": "systemlinks GET",
    "version": "1.0.4",
    "name": "getSystemlinks",
    "group": "Clients",
    "description": "<p>Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/systemlinks",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \n\"The name, unique ID, and URL for all system links on the account. Additionally there is a boolean named systemresults.\" \n\"If true this is a property results page that requires additional parameters. This means the url can be useful when dynamically building results page links but should not be linked to directly.\" \n\"When a client has more than one MLS on their account, listings for search pages that can vary by MLS ID will include a subpages array element.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/widgets/{id}",
    "title": "widgets/{id} GET",
    "version": "1.8.0",
    "name": "getWidgetData",
    "group": "Clients",
    "description": "<p>Gather a single javascript widgets settings, currently on the user's account. Widgets can then be placed on the user's main site via the included URLs.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "id",
            "description": "<p>The widget ID.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets/1234?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID, URL, and options for a single javascript widget that has been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid widget ID will result in 400 error.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/widgets",
    "title": "widgets GET",
    "version": "1.8.0",
    "name": "getWidgetsData",
    "group": "Clients",
    "description": "<p>Gathers all javascript widgets (non-legacy) currently on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID, URL, and options for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.7.0",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.6.0",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.5.0",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.4.0",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.3.0",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.2.3",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.2.2",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.2.1",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.2.0",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.1.1",
    "name": "getWidgetsrc",
    "group": "Clients",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc?rf[]=url",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/clients/widgetsrc",
    "title": "widgetsrc GET",
    "version": "1.0.4",
    "name": "getWidgetsrc",
    "description": "<p>Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgetsrc",
        "type": "json"
      }
    ],
    "group": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The name, unique ID and URL for all javascript widgets that have been created on the user's account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.8.0",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.7.0",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.6.0",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.5.0",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.4.0",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.3.0",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.2.3",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.2.2",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.2.1",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.2.0",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.1.1",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/clients/wrappercache",
    "title": "wrappercache DELETE",
    "version": "1.0.4",
    "name": "getWrappercache",
    "group": "Clients",
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "get",
    "url": "/clients/zipcodes",
    "title": "zipcodes GET",
    "version": "1.2.1",
    "name": "getZipcodes",
    "group": "Clients",
    "description": "<p>Returns the zipcodes available in each of a client's zipcode lists. Since a client can build any number of zipcode lists this method requires the ID of which list you want to view. To get a list of all zipcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/zipcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All zipcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "clients/zipcodes",
    "title": "zipcodes GET",
    "version": "1.2.0",
    "name": "getZipcodes",
    "group": "Clients",
    "description": "<p>Returns the zipcodes available in each of a client's zipcode lists. Since a client can build any number of zipcode lists this method requires the ID of which list you want to view. To get a list of all zipcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/zipcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All zipcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "clients/zipcodes",
    "title": "zipcodes GET",
    "version": "1.1.1",
    "name": "getZipcodes",
    "group": "Clients",
    "description": "<p>Returns the zipcodes available in each of a client's zipcode lists. Since a client can build any number of zipcode lists this method requires the ID of which list you want to view. To get a list of all zipcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/zipcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All zipcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "clients/zipcodes",
    "title": "zipcodes GET",
    "version": "1.0.4",
    "name": "getZipcodes",
    "group": "Clients",
    "description": "<p>Returns the zipcodes available in each of a client's zipcode lists. Since a client can build any number of zipcode lists this method requires the ID of which list you want to view. To get a list of all zipcode lists available do not send the primary request ID. The default list on each account has the id combinedActiveMLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/zipcodes/123",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "listID",
            "description": "<p>If no ID is given a list of IDs is returned.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All zipcodes in a given list or, if no list ID is provided, a list of list IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.8.0",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.7.0",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.6.0",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.5.0",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.4.0",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.3.0",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.2.3",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.2.2",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.2.1",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.2.0",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.1.1",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "get",
    "url": "/clients/listmethods",
    "title": "listmethods GET",
    "version": "1.0.4",
    "name": "listmethods",
    "group": "Clients",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/accountinfo",
    "title": "accountinfo POST",
    "version": "1.8.0",
    "name": "postAccountInfo",
    "group": "Clients",
    "description": "<p>Update client account information.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/accountinfo\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = [\n 'displayName'   => 'Test Display',\n 'address'       => 'Test Street',\n 'city'          => 'Test',\n 'stateProvince' => 'OR', // stateProvince needs to be in abbreviated form.\n 'zipCode'       => '97402',\n 'phone1'        => '5415555555',\n 'phone2'        => '5415555555'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"204 response code.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/accountinfo",
    "title": "accountinfo POST",
    "version": "1.7.0",
    "name": "postAccountInfo",
    "group": "Clients",
    "description": "<p>Update client account information.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/accountinfo\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = [\n 'displayName'   => 'Test Display',\n 'address'       => 'Test Street',\n 'city'          => 'Test',\n 'stateProvince' => 'OR', // stateProvince needs to be in abbreviated form.\n 'zipCode'       => '97402',\n 'phone1'        => '5415555555',\n 'phone2'        => '5415555555'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"204 response code.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/accountinfo",
    "title": "accountinfo POST",
    "version": "1.6.0",
    "name": "postAccountInfo",
    "group": "Clients",
    "description": "<p>Update client account information.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/accountinfo\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = [\n 'displayName'   => 'Test Display',\n 'address'       => 'Test Street',\n 'city'          => 'Test',\n 'stateProvince' => 'OR', // stateProvince needs to be in abbreviated form.\n 'zipCode'       => '97402',\n 'phone1'        => '5415555555',\n 'phone2'        => '5415555555'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"204 response code.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/accountinfo",
    "title": "accountinfo POST",
    "version": "1.5.0",
    "name": "postAccountInfo",
    "group": "Clients",
    "description": "<p>Update client account information.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/accountinfo\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = [\n 'displayName'   => 'Test Display',\n 'address'       => 'Test Street',\n 'city'          => 'Test',\n 'stateProvince' => 'OR', // stateProvince needs to be in abbreviated form.\n 'zipCode'       => '97402',\n 'phone1'        => '5415555555',\n 'phone2'        => '5415555555'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"204 response code.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/widgets/batch",
    "title": "widgets/batch POST",
    "version": "1.8.0",
    "name": "postBatchWidgetsData",
    "group": "Clients",
    "description": "<p>Batch update non-legacy javascript widget's settings from the user's account.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "batch",
            "description": "<p>To update the widgets in batch.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets/batch\n// Note: For batch deletes, a JSON object must be supplied as POST data,\n// with each widget object including the ID of the widget that you wish to update.\n// PHP Example:\n$data = [\n [\n  'id'      => 123\n  'name'    => 'New widget name'\n  'options' => [...]\n ],\n [\n  'id'      => 124\n  'options' => [...]\n ],\n];\n$data = json_encode($data); // Encode as JSON, then include as body of request.",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"List of widget ID's that were updated.\"\n{\n \"updated\": [ \"1\", \"2\" ]\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid widget ID's or validation errors on invalid widget options.\"\nHTTP/1.1 500 \"Failing to update the widgets.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.8.0",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.7.0",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.6.0",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.5.0",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.4.0",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.3.0",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.2.3",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.2.2",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.2.1",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com'\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/dynamicwrapperurl",
    "title": "dynamicwrapperurl POST",
    "version": "1.2.0",
    "name": "postDynamicwrapperurl",
    "group": "Clients",
    "description": "<p>Update dynamic wrapper url for global, pages and saved links. If savedLinkID, or pageID are not passed, the global dynamic wrapper url will be updated.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "http://api.idxbroker.com/clients/dynamicwrapperurl\n\n// Note: The fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'pageID' => '123',\n 'dynamicURL' => 'http://example.com',\n);",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "dynamicURL",
            "description": "<p>dynamic wrapper url.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "savedLinkID",
            "description": "<p>saved link ID if setting dynamic wrapper url for a specific saved link.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "pageID",
            "description": "<p>page ID if setting dynamic wrapper url for a specific page.</p>"
          }
        ]
      }
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid savedLinkID or pageID will result in 400 error\".\nHTTP/1.1 400 \"dynamicURL is required.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.8.0",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.7.0",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.6.0",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.5.0",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.4.0",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.3.0",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.2.3",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.2.2",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.2.1",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.2.0",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/savedlinks",
    "title": "savedlinks POST",
    "version": "1.1.1",
    "name": "postSavedlinks",
    "group": "Clients",
    "description": "<p>Update an existing client's saved link <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in broken saved links.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/savedlinks/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200/204 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "savedLinksID",
            "description": "<p>The ID of a client's saved link</p>"
          }
        ]
      }
    }
  },
  {
    "type": "post",
    "url": "/clients/subheaders",
    "title": "subheaders POST",
    "version": "1.8.0",
    "name": "postSubheaders",
    "group": "Clients",
    "description": "<p>Edit an existing subheader, or multiple subheaders.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "// Note: The updatable fields need to be submitted in the request body\n// as JSON, and your request must include a header 'content-type' set to\n// 'application/json'\n\n// Example 1: Editing one subheader.\n$url = 'https://api.idxbroker.com/clients/subheaders/1'; // The subheader's id\n$data = array(\n 'subheader' => '<p>New Subheader Content</p>'\n);\n$body = json_encode($data);",
        "type": "php"
      },
      {
        "title": "Example Request:",
        "content": "// Note: The updatable fields need to be submitted in the request body\n// as JSON, and your request must include a header 'content-type' set to\n// 'application/json'\n\n// Example 2: Editing multiple subheaders at once:\n$url = 'https://api.idxbroker.com/clients/subheaders/batch';\n$data = array(\n [\n   'id' => 1,\n   'subheader' => '<p>New subheader content for id 1</p>'\n ],\n [\n   'id' => 2,\n   'subheader' => '<p>New subheader content for id 2</p>'\n ],\n [\n   'id' => 3,\n   'subheader' => '<p>A non-existent subheader.</p>'\n ]\n);\n$body = json_encode($data);",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK \"All submitted subheaders are successfully updated.\"",
          "type": "json"
        },
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"Information about result.\"\n{\n \"updated\": [\n   \"1\",\n   \"2\"\n ],\n \"not-found\": [\n   \"3\"\n ]\n}",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.8.0",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.7.0",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.6.0",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.5.0",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.4.0",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.3.0",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.2.3",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.2.2",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/supplemental",
    "title": "supplemental POST",
    "version": "1.2.1",
    "name": "postSupplemental",
    "group": "Clients",
    "description": "<p>Update an existing supplemental listing. <br /><br /><strong> Note: if updating images, existing images are deleted and the new images are inserted instead for the listing.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental/123';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "listingID",
            "description": "<p>The supplemental listing ID</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"if no POST data is supplied, then a list of updatable fields with format information is returned, otherwise on success 204 is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/widgets/{id}",
    "title": "widgets/{id} POST",
    "version": "1.8.0",
    "name": "postWidgetData",
    "group": "Clients",
    "description": "<p>Update a single non-legacy javascript widget's settings from the user's account.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "id",
            "description": "<p>The widget ID.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets/1234\n\n// Note: For updates, a JSON object must be supplied as POST data,\n// containing the widget options you wish to update. Each specific widget type has their own set of valid options.\n// PHP Example:\n$data = [\n 'name'    => 'New widget name',\n 'heading' => 'Homes Over 500k in Fake Subdivision',\n 'layout'  => 'overlayed',\n 'colors   => [\n  'text     => '#FFFFF2',\n  'favorite => '#FF0002'\n ]\n];\n$data = json_encode($data); // Encode as JSON, then include as body of request.",
        "type": "json"
      }
    ],
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid widget ID or options will result in a 400 error.\"\nHTTP/1.1 500 \"Failure to update the widget.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.8.0",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.7.0",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.6.0",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.5.0",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.4.0",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.3.0",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.2.3",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.2.2",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.2.1",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.2.0",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/savedlinks';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/savedlinks",
    "title": "savedlinks PUT",
    "version": "1.1.1",
    "name": "putSavedlinks",
    "group": "Clients",
    "description": "<p>Create a new client saved link.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/savedlinks\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'linkName' => 'Good_side_of_tracks',\n 'pageTitle' => 'Good_side_of_tracks',\n 'linkTitle' => 'Good_side_of_tracks',\n 'queryString' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a client saved link is successfully created, the new saved link's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 saved links.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/subheaders",
    "title": "subheaders PUT",
    "version": "1.8.0",
    "name": "putSubheaders",
    "group": "Clients",
    "description": "<p>Create a new subheader.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/subheaders';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example 1:\n$data = array(\n 'type'      => 'global',\n 'category'  => '',\n 'pageID'    => 0,\n 'subheader' => '<p>Global Subheader Content</p>'\n);\n$data = http_build_query($data);\n\n// Example 2:\n$data = array(\n 'type'      => 'page',\n 'category'  => 'search',\n 'pageID'    => 1000,\n 'subheader' => '<p>Search Page 1000 Subheader Content</p>'\n);\n$data = http_build_query($data);",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a subheader is successfully created, the new subheader's ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Informative errors.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.8.0",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.7.0",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.6.0",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.5.0",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.4.0",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.3.0",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.2.3",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.2.2",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/supplemental",
    "title": "supplemental PUT",
    "version": "1.2.1",
    "name": "putSupplemental",
    "group": "Clients",
    "description": "<p>Create a new supplemental listing. <br /><br /><strong> Note: likeIdxID, likeMlsPtID and zipcode fields are required.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "$url = 'https://api.idxbroker.com/clients/supplemental';\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// Example:\n$data = array(\n 'likeIdxID' => 'a001',\n 'likeMlsPtID' => '1',\n 'zipcode' => '97402',\n 'images' => array('http://example.com/image1.jpg', 'http://example.com/image2.jpg')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a supplemental listing is successfully created, the new supplemental listing ID will be returned. If no PUT data is supplied, then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 417 \"This action is not allowed if the client has more than 1000 supplmental listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Clients"
  },
  {
    "type": "put",
    "url": "/clients/widgets",
    "title": "widgets PUT",
    "version": "1.8.0",
    "name": "putWidgets",
    "group": "Clients",
    "description": "<p>Create a new javascript widget.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/clients/widgets\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data. Each specific widget type has their own set of valid options and invalid options will be ignored.\n// Option examples below will indicate the input type and any single pipe characters indicate 'or', if a string type option has many specific valid values.\n// Example:\n\n$data = [\n 'name'    => 'New Widgets Name',\n 'type'    => 'widgetType',\n 'options' => [...]\n];\n$data = http_build_query($data); // encode and & delineate\n\n// Available Widget Specific Options:\n// Virtual Showings Widget (widgetType: virtualShowings)\n[\n  'market'        => [\n    'idxID'            => 'string',\n    'type'             => 'city|county|zipcode',\n    'masterListAreaID' => 'integer'\n  ],\n  'minPrice'      => 'integer',\n  'maxPrice'      => 'integer',\n  'minBedrooms'   => 'integer',\n  'minBathrooms'  => 'integer',\n  'minSquareFeet' => 'integer',\n  'layout'        => 'horizontal|vertical',\n  'css'           => 'string',\n];\n\n// Market Report Widget (widgetType: marketReport)\n[\n  'market'        => [\n    'idxID'            => 'idxID',\n    'type'             => 'city|county|zipcode',\n    'masterListAreaID' => 'integer'\n  ],\n  'layout'        => 'square|horizontal|vertical',\n  'colors'        => [\n    'primary'        => 'string',\n    'secondary'      => 'string',\n    'tertiary'       => 'string',\n    'quaternary'     => 'string',\n    'buttonText'     => 'string',\n    'statisticsText' => 'string'\n  ],\n  'css'           => 'string'\n];\n\n// Listings Showcase Widget (widgetType: listingsShowcase)\n[\n  'heading'                   => 'string',\n  'market'                    => [\n    'idxID'            => 'idxID',\n    'type'             => 'city|county|postalCode',\n    'masterListAreaID' => 'integer'\n  ],\n  // Limit search by custom ccz lists from the account. ID of the client created custom list and the type.\n  // ID for dynamic mls lists use the idxID. Examples: '189-zipcode', 'b001-county'\n  'locationList'              => 'id-county|city|zipcode',\n  'status'                    => 'active|sold',\n  'minPrice'                  => 'integer',\n  'maxPrice'                  => 'integer',\n  'minBedrooms'               => 'integer',\n  'minBathrooms'              => 'integer',\n  'minSquareFeet'             => 'integer',\n  'sortOrder'                 => 'newest|pra|prd|bda|bdd|tba|tbd|sqfta|sqftd',\n  'maxNumberOfColumns'        => 'integer',\n  'maxNumberOfListings'       => 'integer',\n  'openLinksInNewWindow'      => 'boolean',\n  'displayViewAllResultsLink' => 'boolean',\n  'layout'                    => 'overlayed|below',\n  // Must be valid hex codes.\n  'colors'                    => [\n    'banners'      => 'string',\n    'text'         => 'string',\n    'priceReduced' => 'string',\n    'favorite'     => 'string'\n  ],\n  'fieldsToDisplay'           => [\n    'showBed'                => 'boolean',\n    'showBath'               => 'boolean',\n    'showSqFt'               => 'boolean',\n    'showAcres'              => 'boolean',\n    'showSubdivision'        => 'boolean',\n    'showPrice'              => 'boolean',\n    'showStatus'             => 'boolean',\n    'showAddress'            => 'boolean',\n    'showNewListingBanner'   => 'boolean',\n    'showOpenHouseBanner'    => 'boolean',\n    'showPriceReducedBanner' => 'boolean',\n    'showVirtualTourBanner'  => 'boolean',\n    'showFavoriteListing'    => 'boolean'\n  ],\n  // Great for targeting mls advanced fields or any other query filtering the same way you would with key value pairs on the front end.\n  'editByHandQuery'           => [\n    'add' => '10'\n    'pt'  => [ 1, 2, 3 ],\n    'key' => 'value',\n    'key' => 'value'\n  ],\n  // Additional filtering via a polygon shape.\n  // Circle.\n  'polygonData'               => [\n    'polyType'   => 'circle',\n    'polyRadius' => 'numeric',\n    'centerLat'  => 'string',\n    'centerLng'  => 'string'\n  ],\n  // Polygon. Ensure the first and the last coordinates match to complete the shape object.\n  'polygonData'               => [\n    'polyType'   => 'polygon',\n    'polyCoords' => [\n      [lat, lng],\n      [lat, lng],\n      [lat, lng]\n    ]\n  ],\n  'css'                       => 'string',\n  'newListingBannerThreshold' => 'integer'\n];\n\n// Listings Carousel Widget (widgetType: listingsCarousel)\n// All options from the listings showcase widget in addition to:\n[\n  'displayCarouselArrows' => 'boolean',\n  'enableAutoScroll'      => 'boolean',\n  'autoScrollTimer'       => 'integer',\n  'colors'                => [\n    'arrows'          => 'string',\n    'arrowBackground' => 'string'\n  ]\n];\n\n// Prime Map Search Widget (widgetType: primeMapSearch)\n// All options from the listings showcase widget (minus heading, locationList, market, maxNumberOfColumns, maxNumberOfListings), in addition to:\n[\n  'mapStyle'             => 'road|satellite|satellite_road_labels|grayscale_dark|grayscale_light|night|high_contrast_dark|high_contrast_light',\n  'mapControlsToDisplay' => [\n    'addZoomControl'    => 'boolean',\n    'addPitchControl'   => 'boolean',\n    'addCompassControl' => 'boolean'\n  ],\n  'mapDrawingOptions'    => [\n    'addDrawPoint'     => 'boolean',\n    'addDrawPolygon'   => 'boolean',\n    'addDrawLine'      => 'boolean',\n    'addDrawCircle'    => 'boolean',\n    'addDrawRectangle' => 'boolean',\n    'addEditGeometry'  => 'boolean',\n    'addEraseGeometry' => 'boolean'\n  ],\n  'mapZoom'              => 'integer',\n  'mapCenter'            => [ 44.052071, -123.086754 ]\n];",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The ID, Embed, and Preview URL of the successfully created widget in the user's account.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"The required fields or data options being used to create the widget are missing or invalid.\"\nHTTP/1.1 500 \"Failure to create the new widget.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "post",
    "url": "/clients/widgets-legacy/{id}/upgrade",
    "title": "widgets-legacy/{id}/upgrade POST",
    "version": "1.8.0",
    "name": "upgradeLegacyWidget",
    "group": "Clients",
    "description": "<p>Upgrade a legacy widget to a new widget.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "id",
            "description": "<p>The legacy widget ID.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "upgrade",
            "description": "<p>To return the upgraded widget ID.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Upgrade successful for the given legacy widget ID.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Invalid widget ID.\"\nHTTP/1.1 400 \"Widget is not available for upgrade.\"\nHTTP/1.1 500 \"Failure to upgrade the legacy widget will result in a 500 error.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiClients.php",
    "groupTitle": "Clients"
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.8.0",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.7.0",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.6.0",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.5.0",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.4.0",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.3.0",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.2.3",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.2.2",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.2.1",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.2.0",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/lead",
    "title": "lead DELETE",
    "version": "1.1.1",
    "name": "deleteLead",
    "group": "Leads",
    "description": "<p>Remove a lead system wide. <br /><br /> <strong>This method is to be used at your own risk. We will NOT be held accountable for programmatic errors in your code or the improper use of search values or options within said values resulting in deletion of leads.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.8.0",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.7.0",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.6.0",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.5.0",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.4.0",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.3.0",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.2.3",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.2.2",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.2.1",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.2.0",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.1.1",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/note",
    "title": "note DELETE",
    "version": "1.0.4",
    "name": "deleteNote",
    "group": "Leads",
    "description": "<p>Remove a lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of the note to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.8.0",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.7.0",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.6.0",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.5.0",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.4.0",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.3.0",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.2.3",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.2.2",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.2.1",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.2.0",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.1.1",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/property",
    "title": "property DELETE",
    "version": "1.0.4",
    "name": "deleteProperty",
    "group": "Leads",
    "description": "<p>Remove a lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a property to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.8.0",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.7.0",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.6.0",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.5.0",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.4.0",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.3.0",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.2.3",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.2.2",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.2.1",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.2.0",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.1.1",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "delete",
    "url": "/leads/search",
    "title": "search DELETE",
    "version": "1.0.4",
    "name": "deleteSearch",
    "group": "Leads",
    "description": "<p>Remove a lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of the search to delete.</p>"
          }
        ]
      }
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.8.0",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting\n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'status[0]' => 'verified',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.7.0",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting\n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'status[0]' => 'verified',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.6.0",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'status[0]' => 'verified',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.5.0",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.4.0",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.3.0",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.2.3",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.2.2",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.2.1",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.2.0",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.1.1",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead PUT",
    "version": "1.0.4",
    "name": "getBulklead",
    "group": "Leads",
    "description": "<p>Add leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps.\n// PHP Example:\n$data = array(\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead IDs will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.8.0",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.7.0",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.6.0",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.5.0",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.4.0",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.3.0",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.2.3",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.2.2",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.2.1",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.2.0",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/leadtraffic",
    "title": "leadtraffic GET",
    "version": "1.1.1",
    "name": "getLeadtraffic",
    "group": "Leads",
    "description": "<p>Get traffic history for a specified lead.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of lead traffics that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/leadtraffic/1?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.8.0",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.7.0",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.6.0",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.5.0",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.4.0",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.3.0",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.3",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.2",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.1",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.0",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.1.1",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listcomponents",
    "title": "listcomponents GET",
    "version": "1.0.4",
    "name": "getListcomponents",
    "group": "Leads",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.8.0",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.7.0",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.6.0",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.5.0",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.4.0",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.3.0",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.2.3",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.2.2",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.2.1",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.2.0",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.1.1",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead note is added to our system.\"",
              "\"lastAltered - the date/tome the lead note is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead note, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/note",
    "title": "note GET",
    "version": "1.0.4",
    "name": "getNote",
    "group": "Leads",
    "description": "<p>Get notes for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Lead note information. If no note ID is sent all notes for the lead are returned. If a note ID is passed only the one note is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.8.0",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.7.0",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.6.0",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.5.0",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.4.0",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.3.0",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.2.3",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.2.2",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.2.1",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.2.0",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.1.1",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetim",
            "allowedValues": [
              "\"created - the date/time the lead's saved property is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved property is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead's saved property, this will specify what is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/property",
    "title": "property GET",
    "version": "1.0.4",
    "name": "getProperty",
    "group": "Leads",
    "description": "<p>Get saved properties for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no property ID is passed all properties are returned. If a property ID is passed only the information for that specified property is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.8.0",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.7.0",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.6.0",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.5.0",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.4.0",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.3.0",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.2.3",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.2.2",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.2.1",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.2.0",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.1.1",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - the date/time the lead's saved search is added to our system.\"",
              "\"lastEdited - the date/tome the lead's saved search is updated in our system.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead search, this will specify what is being used to return information.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/search",
    "title": "search GET",
    "version": "1.0.4",
    "name": "getSearch",
    "group": "Leads",
    "description": "<p>Get searches for a lead.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": true,
            "field": "searchID",
            "description": "<p>The ID of a lead's search</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"an array with 2 keys. The key searchInformation that contains all existing saved search information. The key info will return messages about any returned saved search. Currently this info will tell you if any search's advanced fields are not valid in the IDX system.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.8.0",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads including their last 5 viewed listings and search results and total number of viewed listings. Note: Lead traffic information is limited to 180 days.<br /> <strong> For bandwidth and memory considerations there is a limit of 500 on the number of leads that can be returned in any single request when querying for multiple leads. Use pagination to get all leads. </strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate&sortOrder=desc",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "sortBy",
            "description": "<p>Sort leads in the order they were created. Possible values: asc, desc.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads (limited to 500) is returned along with the pagination information to get all leads.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.7.0",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads including their last 5 viewed listings and search results and total number of viewed listings. Note: Lead traffic information is limited to 180 days.<br /> <strong> For bandwidth and memory considerations there is a limit of 500 on the number of leads that can be returned in any single request when querying for multiple leads. Use pagination to get all leads. </strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate&sortOrder=desc",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "sortBy",
            "description": "<p>Sort leads in the order they were created. Possible values: asc, desc.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads (limited to 500) is returned along with the pagination information to get all leads.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.6.0",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.<br /> <strong> For bandwidth and memory considerations there is a limit of 500 on the number of leads that can be returned in any single request when querying for multiple leads. Use pagination to get all leads. </strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads (limited to 500) is returned along with the pagination information to get all leads.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.5.0",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.4.0",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.3.0",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.2.3",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.2.2",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.2.1",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.2.0",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.1.1",
    "name": "getlead",
    "group": "Leads",
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2015-01-01+23:59:59&dateType=subscribeDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>there are several dates associated with a lead, this will specify what is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/lead",
    "title": "lead GET",
    "version": "1.0.4",
    "name": "getlead",
    "group": "Leads",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": true,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "description": "<p>Get information for one or multiple leads.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead ID is provided detailed information about that lead is returned. Otherwise simple information about all leads is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.8.0",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.7.0",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.6.0",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.5.0",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.4.0",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.3.0",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.2.3",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.2.2",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.2.1",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.2.0",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.1.1",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/leads/listmethods",
    "title": "listmethods GET",
    "version": "1.0.4",
    "name": "listmethods",
    "group": "Leads",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.8.0",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting\n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' => 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'status[0]' => 'verified',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.7.0",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting\n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' => 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'status[0]' => 'verified',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.6.0",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' => 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'status[0]' => 'verified',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.5.0",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' = 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.4.0",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' = 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.3.0",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' = 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.2.3",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' = 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/bulklead",
    "title": "bulklead POST",
    "version": "1.2.2",
    "name": "postBulklead",
    "group": "Leads",
    "description": "<p>Update leads in batches of up to 100 per request.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/bulklead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data. Each lead field should be passed as an indexed array starting \n// at and going to, at most, 100. There must not be any gaps. LeadID is required for each lead to be updated\n// PHP Example:\n$data = array(\n 'id[0]' = 1,\n 'firstName[0]' => 'John',\n 'lastName[0]' => 'Doe',\n 'email[0]' => 'john@example.com',\n 'id[1]' = 2,\n 'firstName[1]' => 'Aaron',\n 'lastName[1]' => 'Aaronson',\n 'email[1]' => 'aaron@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a leads are successfully updated the updated lead IDs will be returned. If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.8.0",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com',\n 'status' => 'verified'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.7.0",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com',\n 'status' => 'verified'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.6.0",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com',\n 'status' => 'verified'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.5.0",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.4.0",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.3.0",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.2.3",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.2.2",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.2.1",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.2.0",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.1.1",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/lead",
    "title": "lead POST",
    "version": "1.0.4",
    "name": "postLead",
    "group": "Leads",
    "description": "<p>Update the information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If no POST data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.8.0",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.7.0",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.6.0",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.5.0",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.4.0",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.3.0",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.2.3",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.2.2",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.2.1",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.2.0",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.1.1",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/note",
    "title": "note POST",
    "version": "1.0.4",
    "name": "postNote",
    "group": "Leads",
    "description": "<p>Update the notes information for one lead specified by the primary request ID.</p>",
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "noteID",
            "description": "<p>The ID of a lead's note.</p>"
          }
        ]
      }
    },
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.8.0",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.7.0",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.6.0",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.5.0",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.4.0",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.3.0",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.2.3",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.2.2",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.2.1",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.2.0",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.1.1",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/property",
    "title": "property POST",
    "version": "1.0.4",
    "name": "postProperty",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "propertyID",
            "description": "<p>The ID of a lead's saved property.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK If no POST data is supplied then a list of updatable fields with format information is returned.",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.8.0",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.7.0",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.6.0",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.5.0",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.4.0",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.3.0",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.2.3",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.2.2",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.2.1",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.2.0",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.1.1",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "post",
    "url": "/leads/search",
    "title": "search POST",
    "version": "1.0.4",
    "name": "postSearch",
    "group": "Leads",
    "description": "<p>Update an existing lead's saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as POST data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "number",
            "optional": false,
            "field": "searchID",
            "description": "<p>The ID of a lead's saved search.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.8.0",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com',\n 'status' => 'verified'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.7.0",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com',\n 'status' => 'verified'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.6.0",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com',\n 'status' => 'verified'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.5.0",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.4.0",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.3.0",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.2.3",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.2.2",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.2.1",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.2.0",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.1.1",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/lead",
    "title": "lead PUT",
    "version": "1.0.4",
    "name": "putLead",
    "group": "Leads",
    "description": "<p>Create a new lead. <br /><br /> <strong>Special Note:  Currently the API cannot differentiate between a lead rejected due to server error or one rejected due to bad email address. The lead system requires email addresses that are correctly formatted to cut down on garbage accounts, and they need to have a valid MX record. Most 500 error from this method are a result of bad email addresses. In future versions we will differentiate the error and make the MX record requirement optional.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/lead\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'firstName' => 'John',\n 'lastName' => 'Doe',\n 'email' => 'john@example.com'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a lead is successfully created the new lead's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.8.0",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.7.0",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.6.0",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.5.0",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.4.0",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.3.0",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.2.3",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.2.2",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.2.1",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.2.0",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.1.1",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/note",
    "title": "note PUT",
    "version": "1.0.4",
    "name": "putNote",
    "group": "Leads",
    "description": "<p>Create a new lead note.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/note/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'note' => 'Test note'\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a note is successfully created the new notes's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.8.0",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.7.0",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.6.0",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.5.0",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.4.0",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.3.0",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.2.3",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.2.2",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.2.1",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.2.0",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.1.1",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/property",
    "title": "property PUT",
    "version": "1.0.4",
    "name": "putProperty",
    "group": "Leads",
    "description": "<p>Create a new lead saved property.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/property/1\n\n// Note: idxID and listingID are required.\n// The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'propertyName' => 'Test Property',\n 'property' => array('idxID' => 'a001', 'listingID' => '345678')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"If a saved property is successfully created the new property's ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.8.0",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiLeads.php",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.7.0",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format\n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.6.0",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.5.0",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.4.0",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.3.0",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.2.3",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.2.2",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.2.1",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.2.0",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.1.1",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "put",
    "url": "/leads/search",
    "title": "search PUT",
    "version": "1.0.4",
    "name": "putSearch",
    "group": "Leads",
    "description": "<p>Create a new lead saved search.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/leads/search/1\n\n// Note: The updatable fields need to be in a URL encoded, ampersand delineated query string format \n// and need to be supplied as PUT data.\n// PHP Example:\n$data = array(\n 'searchName' => 'Test Search',\n 'search' => array('idxID' => 'a001', 'hp' => '200000')\n);\n$data = http_build_query($data); // encode and & delineate",
        "type": "php"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "number",
            "optional": false,
            "field": "leadID",
            "description": "<p>The ID of a lead.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 \"If a lead search is successfully created the new searches' ID will be returned. If no PUT data is supplied then a list of updatable fields with format information is returned.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Leads"
  },
  {
    "type": "get",
    "url": "/mls/approval-instructions",
    "title": "approval-instructions GET",
    "version": "1.8.0",
    "name": "approval_instructions",
    "group": "MLS",
    "description": "<p>MLS approval instructions for a given mls.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/approval-instructions/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the title and content of the approval instructions.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.8.0",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.7.0",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.6.0",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.5.0",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.4.0",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.3.0",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.2.3",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.2.2",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.2.1",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.2.0",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.1.1",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/age",
    "title": "age GET",
    "version": "1.0.4",
    "name": "getAge",
    "group": "MLS",
    "description": "<p>Gives the date and time a particular MLS was last downloaded, processed and the last time images gathering was completed.<br /><br /> <strong>Note: dates/times given are UTC.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/age/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of timestamps for last downloaded, last processes and last images gathered.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.8.0",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.7.0",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.6.0",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.5.0",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.4.0",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.3.0",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.2.3",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.2.2",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.2.1",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.2.0",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.1.1",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/mls/approvedmls",
    "title": "approvedmls GET",
    "version": "1.0.4",
    "name": "getApprovedmls",
    "group": "MLS",
    "description": "<p>This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.<br /><br /> <strong>Note: This method was previously camelcased as &quot;approvedMLS&quot; but was made lower case to fit the API naming convention. Calls to &quot;approvedMLS&quot; will be forwarded to &quot;approvedmls&quot; and &quot;approvedMLS&quot; is listed as deprecated in the method list.</stron></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"A list of IDs and names for all MLSs approved for display on the client account.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.8.0",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.7.0",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.6.0",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.5.0",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.4.0",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.3.0",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.2.3",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.2.2",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.2.1",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.2.0",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.1.1",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities",
    "title": "cities GET",
    "version": "1.0.4",
    "name": "getCities",
    "group": "MLS",
    "description": "<p>All cities represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.8.0",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.7.0",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.6.0",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.5.0",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.4.0",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.3.0",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.2.3",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.2.2",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.2.1",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.2.0",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.1.1",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties",
    "title": "counties GET",
    "version": "1.0.4",
    "name": "getCounties",
    "group": "MLS",
    "description": "<p>All counties represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.8.0",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.7.0",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.6.0",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.5.0",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.4.0",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.3.0",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.3",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.2",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.1",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.0",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.1.1",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listcomponents",
    "title": "listcomponents GET",
    "version": "1.0.4",
    "name": "getListcomponents",
    "group": "MLS",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes",
    "title": "postalcodes GET",
    "version": "1.8.0",
    "name": "getPostalcodes",
    "group": "MLS",
    "description": "<p>All postal codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes",
    "title": "postalcodes GET",
    "version": "1.7.0",
    "name": "getPostalcodes",
    "group": "MLS",
    "description": "<p>All postal codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes",
    "title": "postalcodes GET",
    "version": "1.6.0",
    "name": "getPostalcodes",
    "group": "MLS",
    "description": "<p>All postal codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes",
    "title": "postalcodes GET",
    "version": "1.5.0",
    "name": "getPostalcodes",
    "group": "MLS",
    "description": "<p>All postal codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes",
    "title": "postalcodes GET",
    "version": "1.4.0",
    "name": "getPostalcodes",
    "group": "MLS",
    "description": "<p>All postal codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes",
    "title": "postalcodes GET",
    "version": "1.3.0",
    "name": "getPostalcodes",
    "group": "MLS",
    "description": "<p>All postal codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes",
    "title": "postalcodes GET",
    "version": "1.2.3",
    "name": "getPostalcodes",
    "group": "MLS",
    "description": "<p>All postal codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes/sold",
    "title": "postalcodes/sold GET",
    "version": "1.8.0",
    "name": "getPostalcodessold",
    "group": "MLS",
    "description": "<p>All postal codes (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes/sold",
    "title": "postalcodes/sold GET",
    "version": "1.7.0",
    "name": "getPostalcodessold",
    "group": "MLS",
    "description": "<p>All postal codes (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/postalcodes/sold",
    "title": "postalcodes/sold GET",
    "version": "1.6.0",
    "name": "getPostalcodessold",
    "group": "MLS",
    "description": "<p>All postal codes (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/postalcodes/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"id - a 5 digit postal code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available postalcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.8.0",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.7.0",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.6.0",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.5.0",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.4.0",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.3.0",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.2.3",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.2.2",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.2.1",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.2.0",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.1.1",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices",
    "title": "prices GET",
    "version": "1.0.4",
    "name": "getPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.8.0",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.7.0",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.6.0",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.5.0",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.4.0",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.3.0",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.2.3",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.2.2",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.2.1",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.2.0",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.1.1",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount",
    "title": "propertycount GET",
    "version": "1.0.4",
    "name": "getPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.8.0",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.7.0",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.6.0",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.5.0",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.4.0",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.3.0",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.3",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.2",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.1",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.0",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.1.1",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertytypes",
    "title": "propertytypes GET",
    "version": "1.0.4",
    "name": "getPropertytypes",
    "group": "MLS",
    "description": "<p>Gives the property type information for all types that are available on a given MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertytypes/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned numeric ID of the MLS property type as seen in a typical results page URL.\"",
              "\"mlsPropertyType - the name of the property type as given by the MLS.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array of property type information including MLS property type ID, MLS property type name, parent property type, and subtypes.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.8.0",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.7.0",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.6.0",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.5.0",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.4.0",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.3.0",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.2.3",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.2.2",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.2.1",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.2.0",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.1.1",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfields",
    "title": "searchfields GET",
    "version": "1.0.4",
    "name": "getSearchfields",
    "group": "MLS",
    "description": "<p>All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfields/a001?filterField=mlsPtID&filterValue=1",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "allowedValues": [
              "\"mlsPtID - the IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.\"",
              "\"parentPtID - the IDX assigned parent property type ID; use any time multiple MLSs are being searched at once.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all MLS fields that are searchable according to MLS rules and IDX guidelines. Array contains the field's name (which is the field to be used as a key when performing a search), the display name (as should be displayed in a search form), and both the mlsPtID and parentPtID to which the field belongs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.8.0",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.7.0",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.6.0",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.5.0",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.4.0",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.3.0",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.2.3",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.2.2",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.2.1",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.2.0",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.1.1",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues",
    "title": "searchfieldvalues GET",
    "version": "1.0.4",
    "name": "getSearchfieldvalues",
    "group": "MLS",
    "description": "<p>Field values in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities/sold",
    "title": "cities/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataCities",
    "group": "MLS",
    "description": "<p>All cities (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities/sold",
    "title": "cities/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataCities",
    "group": "MLS",
    "description": "<p>All cities (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/cities/sold",
    "title": "cities/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataCities",
    "group": "MLS",
    "description": "<p>All cities (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/cities/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"cityID - the IDX assigned cityID value.\"",
              "\"cityName - the name of a city.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available cities along with applicable city ID, property type, and state as well as a count of the number of occurrences for each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties/sold",
    "title": "counties/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataCounties",
    "group": "MLS",
    "description": "<p>All counties (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/sold/a002?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties/sold",
    "title": "counties/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataCounties",
    "group": "MLS",
    "description": "<p>All counties (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/sold/a002?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/counties/sold",
    "title": "counties/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataCounties",
    "group": "MLS",
    "description": "<p>All counties (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/counties/sold/a002?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"countyID - the IDX assigned countyID value.\"",
              "\"countyName - the name of a county.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available counties along with applicable county ID, property type, and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices/sold",
    "title": "prices/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties (limited to sold data) listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/sold/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices/sold",
    "title": "prices/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties (limited to sold data) listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/sold/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/prices/sold",
    "title": "prices/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataPrices",
    "group": "MLS",
    "description": "<p>The sum total of properties (limited to sold data) listed in a given MLS as well as sums for each property type in the MLS.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/prices/sold/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"A multidimensional array with the total sum and the sum for each property type.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount/sold",
    "title": "propertycount/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available (limited to sold data) for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/sold/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount/sold",
    "title": "propertycount/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available (limited to sold data) for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/sold/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/propertycount/sold",
    "title": "propertycount/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataPropertycount",
    "group": "MLS",
    "description": "<p>Gives a total number of listings available (limited to sold data) for a given city, county, or zipcode.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/propertycount/sold/a001?countType=city&countSpecifier=37536",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"city\"",
              "\"county\"",
              "\"zipcode\""
            ],
            "optional": false,
            "field": "countType",
            "description": "<p>Specify if you are looking for the count of a city, county, or zipcode.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "countSpecifier",
            "description": "<p>The numeric city ID, county ID, or zipcode for which you want to get a property count.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An integer count of the number of properties.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues/sold",
    "title": "searchfieldvalues/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataSearchFieldValues",
    "group": "MLS",
    "description": "<p>Field values (limited to sold data) in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/sold/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field limited to sold data.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues/sold",
    "title": "searchfieldvalues/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataSearchFieldValues",
    "group": "MLS",
    "description": "<p>Field values (limited to sold data) in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/sold/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field limited to sold data.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/searchfieldvalues/sold",
    "title": "searchfieldvalues/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataSearchFieldValues",
    "group": "MLS",
    "description": "<p>Field values (limited to sold data) in a given MLS that are currently allowed to be searched according to MLS guidelines.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/searchfieldvalues/sold/a001?mlsPtID=1&name=subdivision",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit the result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": false,
            "field": "mlsPtID",
            "description": "<p>The IDX assigned ID of the MLS property type(s). See the propertytypes method in this API/Component for a lookup of property type IDs.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": false,
            "field": "name",
            "description": "<p>mls field name - the IDX assigned name of the MLS field name. See the searchfields for the list of searchable fields.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing all the values for the given mls field limited to sold data.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes/sold",
    "title": "zipcodes/sold GET",
    "version": "1.8.0",
    "name": "getSoldDataZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes/sold",
    "title": "zipcodes/sold GET",
    "version": "1.7.0",
    "name": "getSoldDataZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes/sold",
    "title": "zipcodes/sold GET",
    "version": "1.6.0",
    "name": "getSoldDataZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes (limited to sold data) represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/sold/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "sold",
            "description": "<p>To limit result to sold data.</p>"
          }
        ],
        "secondary request ID": [
          {
            "group": "secondary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.8.0",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.7.0",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.6.0",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.5.0",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.4.0",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.3.0",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.2.3",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.2.2",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.2.1",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.2.0",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.1.1",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/zipcodes",
    "title": "zipcodes GET",
    "version": "1.0.4",
    "name": "getZipcodes",
    "group": "MLS",
    "description": "<p>All zip codes represented in the current set of MLS data are available from this method. The output can be filtered using additional GET parameters.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/mls/zipcodes/a001?filterField=stateAbrv&filterValue=OR",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": false,
            "field": "idxID",
            "description": "<p>format: x000</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"zipcode - a 5 digit zip code.\"",
              "\"stateAbrv - the 2 letter state abbreviation.\"",
              "\"mlsPtID - the IDX assigned ID of the MLS property type (see the propertytypes method).\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"Available zipcodes along with applicable property type and state as well as a count of the number of occurrences of each value.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.8.0",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiMls.php",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.7.0",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.6.0",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.5.0",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.4.0",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.3.0",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.2.3",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.2.2",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.2.1",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.2.0",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.1.1",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/mls/listmethods",
    "title": "listmethods GET",
    "version": "1.0.4",
    "name": "listmethods",
    "group": "MLS",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "MLS"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.8.0",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.7.0",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.6.0",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.5.0",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.4.0",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.3.0",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.2.3",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.2.2",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the default api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The default api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.2.1",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the latest api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response: ",
          "content": "HTTP/1.1 200 OK \"The latest api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/apiversion",
    "title": "apiversion GET",
    "version": "1.2.0",
    "name": "apiversion",
    "group": "Partners",
    "description": "<p>Get the latest api version.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response: ",
          "content": "HTTP/1.1 200 OK \"The latest api version.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.8.0",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.7.0",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.6.0",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.5.0",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.4.0",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.3.0",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.2.3",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.2.2",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.2.1",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.2.0",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.1.1",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/aggregatedagents?rf[]=userID",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedagents",
    "title": "aggregatedagents GET",
    "version": "1.0.4",
    "name": "getAggregatedagents",
    "group": "Partners",
    "description": "<p>Get a list of all agents for your clients.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available agents.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.8.0",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.7.0",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.6.0",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.5.0",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.4.0",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.3.0",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.2.3",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.2.2",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.2.1",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.2.0",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded&rf[]=listingID&clientChunk=1&includeDisabledAccounts=true",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.1.1",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedfeatured",
    "title": "aggregatedfeatured GET",
    "version": "1.0.4",
    "name": "getAggregatedfeatured",
    "group": "Partners",
    "description": "<p>Get a list of featured MLS properties. <br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedfeatured?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "disclaimers",
            "description": "<p>Include MLS disclaimer/courtesy in the response.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of featured MLS properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.8.0",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads including their last 5 viewed listings and search results and total number of viewed listings. Note: Lead traffic information is limited to 180 days.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, last activity date, last 5 viewed listings, last 5 search results and total number of viewed listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.7.0",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads including their last 5 viewed listings and search results and total number of viewed listings. Note: Lead traffic information is limited to 180 days.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, last activity date, last 5 viewed listings, last 5 search results and total number of viewed listings.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.6.0",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.5.0",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.4.0",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.3.0",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.2.3",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.2.2",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.2.1",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.2.0",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.1.1",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleads",
    "title": "aggregatedleads GET",
    "version": "1.0.4",
    "name": "getAggregatedleads",
    "group": "Partners",
    "description": "<p>Get a list of all leads.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of leads that can be returned in any single request. Even if a full week of data is requested this limit will only be encountered if your clients have a combined average 30+ leads created, updated, or active per hour (as such it will be most common when requesting leads based on last property update date). If this limit is exceeded a 413 -Requested Entity Too Large error is returned. If encountered a smaller interval will need to be used.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleads?interval=24&startDatetime=2015-01-01+23:59:59&dateType=lastLoginDate",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"subscribeDate - set at the time the lead signed up or was added to the system via API or middleware.\"",
              "\"lastEdited - set any time lead information is edited.\"",
              "\"lastLoginDate - the last time the lead logged in to their account.\"",
              "\"lastPropertyUpdateDate - the last time the lead received property updates.\"",
              "\"lastActivityDate - the last time the lead was active. This could be a login, a saved property, or a saved search.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified subscribeDate will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, lead ID, first name, last name, email address, address, city, state/province, country, zipCode, phone number, ID of the agent assigned, email format (html or plain text), disabled status (y/n), allowed to log in to their account (y/n), will receive property updates (y/n), subscribe date, last edited, last login date, last property update date, last activity type, and last activity date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.8.0",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.7.0",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.6.0",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.5.0",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.4.0",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.3.0",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.2.3",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.2.2",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.2.1",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.2.0",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.1.1",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedleadtraffic",
    "title": "aggregatedleadtraffic GET",
    "version": "1.0.4",
    "name": "getAggregatedleadtraffic",
    "group": "Partners",
    "description": "<p>Get a list of all leads traffic history.<br /><br /> <strong>Note: For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"The applicable client account ID, date, lead ID, IP , page, and referrer.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.8.0",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.7.0",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.6.0",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.5.0",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.4.0",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.3.0",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.2.3",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.2.2",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.2.1",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.2.0",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method give the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.1.1",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedlistingstatus",
    "title": "aggregatedlistingstatus GET",
    "version": "1.0.4",
    "name": "getAggregatedlistingstatus",
    "group": "Partners",
    "description": "<p>This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedlistingstatus?filterField=status&filterValue=active",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"status\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"active\"",
              "\"unknown\"",
              "\"sold\"",
              "\"pending\"",
              "\"contigent\""
            ],
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"MLS listings along with their statuses.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.8.0",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.7.0",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.6.0",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.5.0",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.4.0",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.3.0",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.2.3",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.2.2",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.2.1",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.2.0",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.1.1",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedproperties",
    "title": "aggregatedproperties GET",
    "version": "1.0.4",
    "name": "getAggregatedproperties",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved properties.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedproperties?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the saved property is saved.\"",
              "\"lastEdited - set any time saved property information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.8.0",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.7.0",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.6.0",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.5.0",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.4.0",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.3.0",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.2.3",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.2.2",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.2.1",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.2.0",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.1.1",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsearches",
    "title": "aggregatedsearches GET",
    "version": "1.0.4",
    "name": "getAggregatedsearches",
    "group": "Partners",
    "description": "<p>Get a list of all lead saved searches.<br /><br /> <strong>For bandwidth and memory considerations there is a limit of 5,000 on the number of searches that can be returned in any single request.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsearches?interval=24&startDatetime=2015-01-01+23:59:59&dateType=created",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"created - set at the time the search is saved.\"",
              "\"lastEdited - set any time search information is edited.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a lead, this will specify is being used to return information. If no value is specified created will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 168 (1 week).</li>  <li> If no value is specified 1 hour will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"search ID, the applicable client account ID, lead ID, page ID, search name, search parameters, lead will receive property updates (y/n), created date, last edited date.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.8.0",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.7.0",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.6.0",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.5.0",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.4.0",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.3.0",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.2.3",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.2.2",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.2.1",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.2.0",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.1.1",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsoldpending",
    "title": "aggregatedsoldpending GET",
    "version": "1.0.4",
    "name": "getAggregatedsoldpending",
    "group": "Partners",
    "description": "<p>Get a list of sold/pending MLS properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.<br /><br /> We are planning to add the ability to query by the date the property left the market and, for sold listings, the date it was sold in a future update.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedsoldpending?interval=24&startDatetime=2015-01-01+23:59:59&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of soldpending properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.8.0",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.7.0",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.6.0",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.5.0",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.4.0",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.3.0",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.2.3",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "offset",
            "description": "<p>Items to skip from the beginning.</p> <ul>  <li>Combine with limit to return part of data.</li>  <li>Default is 0</li>  <li>For example: specifying offset=0 and limit=5 will return the first 5 of 10 total results.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "limit",
            "description": "<p>Number of items to return.</p> <ul>  <li>Combine with offset to return part of data.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.2.2",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.2.1",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.2.0",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>           <li> Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off. </li>          <li> Intervals will also be rounded to the nearest second.</li>      </ul>  <li> The interval specifies the number of hours before the startDatetime from which information will be returned. </li>  <li> Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "clientChunk",
            "description": "<p>Limit the results data to 400 clients. Example: clientChunk=1 returns data for the first 400 clients and clientChunk=2 returns the data for the next 400 clients.</p>"
          },
          {
            "group": "additional input",
            "type": "boolean",
            "optional": true,
            "field": "includeDisabledAccounts",
            "description": "<p>By default, disabled accounts are excluded from the results data. Use this parameter to include disabled accounts.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.1.1",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/aggregatedsupplemental",
    "title": "aggregatedsupplemental GET",
    "version": "1.0.4",
    "name": "getAggregatedsupplemental",
    "group": "Partners",
    "description": "<p>Get a list of supplemental (non-MLS) properties.<br /><br /> <strong> Output fields may or may not be populated depending on how the information was entered into the IDX system.</strong></p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/aggregatedleadtraffic?interval=24&startDatetime=2015-01-01+23:59:59&&dateType=dateAdded",
        "type": "json"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"list of supplemental (non-MLS) properties for each client.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "number",
            "optional": true,
            "field": "interval",
            "description": "<p>The number of hours worth of data to return. <br /></p> <ul>  <li>This must be a numeric value but can be an integer or a decimal. E.g. to get the last 90 minutes you would use an interval value of 1.5</li>      <ul>          <li>Up to 4 digits after the decimal point will be tolerated, additional precision will be rounded off.</li>          <li>Intervals will also be rounded to the nearest second.</li>      </ul>  <li>The interval specifies the number of hours before the startDatetime from which information will be returned.</li>  <li>Minimum value: 0.0166 (~ 1 minute). Maximum value: 8765 (1 year).</li>  <li>If no value is specified 720 hours (~1 month) will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "optional": true,
            "field": "startDatetime",
            "description": "<p>The date and time to from which the interval counts back.</p> <ul>  <li>      This is the date and time closest to now from which you want information.      E.g. if you want all data stored on New Year's Day you could use an interval of 24 plus a startDatetime of 2015-01-01 23:59:59.      This will pull data from the very end of the day to 24 hours previous.  </li>  <li>Format: YYYY-MM-DD hh:mm:ss</li>  <li>This method currently assumes the date passed will be UTC.</li>  <li>If no value is specified the current date/time will be used.</li> </ul>"
          },
          {
            "group": "additional input",
            "type": "datetime",
            "allowedValues": [
              "\"dateAdded - the date/time at which the IDX system first added the listing to our system.\"",
              "\"dateModified - the date time the IDX system last saw a change in data as listed in the MLS.\""
            ],
            "optional": true,
            "field": "dateType",
            "description": "<p>There are several dates associated with a property, this will specify what is being used to return information. If no value is specified dateAdded will be used.</p>"
          }
        ]
      }
    }
  },
  {
    "type": "get",
    "url": "/partners/availablemls",
    "title": "availablemls GET",
    "version": "1.8.0",
    "name": "getAvailableMls",
    "group": "Partners",
    "description": "<p>List of available MLSs with their fees.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"List of available MLSs with their fees.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/availablemls",
    "title": "availablemls GET",
    "version": "1.7.0",
    "name": "getAvailableMls",
    "group": "Partners",
    "description": "<p>List of available MLSs with their fees.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"List of available MLSs with their fees.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/availablemls",
    "title": "availablemls GET",
    "version": "1.6.0",
    "name": "getAvailableMls",
    "group": "Partners",
    "description": "<p>List of available MLSs with their fees.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"List of available MLSs with their fees.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/availablemls",
    "title": "availablemls GET",
    "version": "1.5.0",
    "name": "getAvailableMls",
    "group": "Partners",
    "description": "<p>List of available MLSs with their fees.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"List of available MLSs with their fees.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/availablemls",
    "title": "availablemls GET",
    "version": "1.4.0",
    "name": "getAvailableMls",
    "group": "Partners",
    "description": "<p>List of available MLSs with their fees.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"List of available MLSs with their fees.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.8.0",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, multiuser addon, current API key, and approved MLSs of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.7.0",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, multiuser addon, current API key, and approved MLSs of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.6.0",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, multiuser addon, current API key, and approved MLSs of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.5.0",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, multiuser addon, current API key, and approved MLSs of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.4.0",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.3.0",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.2.3",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.2.2",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.2.1",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.2.0",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.1.1",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/clients",
    "title": "clients GET",
    "version": "1.0.4",
    "name": "getClients",
    "group": "Partners",
    "description": "<p>A list of clients available to a given partner. The list of clients can be filtered by GET values.</p>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/clients?filterField=accountStatus&filterValue=enabled",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "additional input": [
          {
            "group": "additional input",
            "type": "string",
            "allowedValues": [
              "\"accountStatus - filter to just enabled or just disabled accounts.\"",
              "\"accountID - information for a single client by their account ID.\""
            ],
            "optional": true,
            "field": "filterField",
            "description": "<p>The field to use when filtering output.</p>"
          },
          {
            "group": "additional input",
            "type": "string",
            "optional": true,
            "field": "filterValue",
            "description": "<p>The value by which to filter. Conditional on use of filterField</p>"
          },
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"The account ID, company name, display name, account status, and current API key of each client or clients matching the filter values.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.8.0",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.7.0",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.6.0",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.5.0",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.4.0",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.3.0",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.3",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.2",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.1",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.2.0",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.1.1",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listcomponents",
    "title": "listcomponents GET",
    "version": "1.0.4",
    "name": "getListcomponents",
    "group": "Partners",
    "description": "<p>This is a simple, access anywhere, method for getting a list of all API components available.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"All available APIs/Components.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/pricing",
    "title": "pricing GET",
    "version": "1.8.0",
    "name": "getPricing",
    "group": "Partners",
    "description": "<p>Get IDX account and agent/office add-on pricing.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"IDX account and agent/office add-on pricing.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/pricing",
    "title": "pricing GET",
    "version": "1.7.0",
    "name": "getPricing",
    "group": "Partners",
    "description": "<p>Get IDX account and agent/office add-on pricing.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"IDX account and agent/office add-on pricing.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/pricing",
    "title": "pricing GET",
    "version": "1.6.0",
    "name": "getPricing",
    "group": "Partners",
    "description": "<p>Get IDX account and agent/office add-on pricing.<br /><br /></p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"IDX account and agent/office add-on pricing.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.8.0",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.7.0",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.6.0",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.5.0",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.4.0",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.3.0",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.3",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.2",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.1",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.2.0",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.1.1",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ],
        "additional input": [
          {
            "group": "additional input",
            "type": "array",
            "optional": true,
            "field": "rf",
            "description": "<p>Array of fields to return in the output.</p> <ul>  <li>List of available return fields can be obtained via the listmethods method.</li>  <li>rf[]=\\* or rf=\\* returns all the available fields in the output</li>  <li>Specified fields that are not in the available return fields list will be ignored.</li> </ul>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/propertytypes",
    "title": "propertytypes GET",
    "version": "1.0.4",
    "name": "getPropertytypes",
    "group": "Partners",
    "description": "<p>Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member.<br /><br /> Note: The IDX property types are those used for multiple MLS searches and are equivalent to the property types used in the original IDX product. The data returned is structured as:</p>  <ul>      <li>idxPropTypes</li>          <ul><li>parentPtID - the numeric ID for IDX property types; seen as parentPtID when retrieving property information.</li>          <li>pt - the 2 to 3 letter abbreviated property type as seen in multiple MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li></ul>      <li>[idxID] in the format a### (this element will not be present at all if no IDX ID is provided)</li>          <ul><li>mlsPtID - the numeric ID given to MLS property types; seen as parentPtID when retrieving property information and in single MLS search queries as the variable pt.</li>          <li>propertyType - the human friendly property type name.</li>          <li>parentPtID - the ID of the IDX property type to which this MLS property type belongs.</li></ul>  </ul>",
    "examples": [
      {
        "title": "Example Request:",
        "content": "https://api.idxbroker.com/partners/propertytypes/a001",
        "type": "json"
      }
    ],
    "parameter": {
      "fields": {
        "primary request ID": [
          {
            "group": "primary request ID",
            "type": "string",
            "optional": true,
            "field": "idxID",
            "description": "<p>The IDX ID of the MLS from which you need property type information. If no IDX ID is specified then only the IDX property types (parentPtID) will be returned.</p>"
          }
        ]
      }
    },
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 OK \"An array containing the IDX property types and, if an IDX ID has been provided, the MLS's property types and their IDs.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.8.0",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.7.0",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.6.0",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.5.0",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.4.0",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.3.0",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.2.3",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.2.2",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.2.1",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.2.0",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.1.1",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "get",
    "url": "/partners/listmethods",
    "title": "listmethods GET",
    "version": "1.0.4",
    "name": "listmethods",
    "group": "Partners",
    "description": "<p>A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status.</p>",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"Basic information about all available methods in this API.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners"
  },
  {
    "type": "put",
    "url": "/partners/subscriber",
    "title": "subscriber PUT",
    "version": "1.8.0",
    "name": "putSubscriber",
    "group": "Partners",
    "description": "<p>Create IDX subscriber. Once the client account is created, the API key associated with the new signup will be activated.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request: PHP",
        "content": "$url = 'https://api.idxbroker.com/partners/subscriber';\n\n// Note: To get list of required or optional fields, simply make a request with nothing in the body.\n// Make sure all required fields are passed in the request body.\n// Example:\n$data = [\n    'product'               => 'lite',\n    'firstName'             => 'Test',\n    'lastName'              => 'Test',\n    'companyName'           => 'Test Company',\n    'address'               => '1000 E Test street',\n    'city'                  => 'Eugene',\n    'state'                 => 'OR', // Use XX for international.\n    'zipcode'               => 97402,\n    'primaryPhone'          => '5555555555',\n    'email'                 => 'test@gmail.com',\n    'website'               => 'http://example.com',\n    'mlsIDList'             => 'a001,a002',\n    'agreeToTermsOfService' => 'yes',\n    'customDomain'          => 'search.example.com',\n    'useCustomDomain'       => 'y',\n];\n$data = http_build_query($data); // Encode and & delineate.",
        "type": "php"
      }
    ],
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 200 OK \"An API key assigned to the specific client signup, which will be used and activated once the client account is created.\"",
          "type": "json"
        }
      ]
    },
    "error": {
      "examples": [
        {
          "title": "Error-Response:",
          "content": "HTTP/1.1 400 \"Missing required or invalid fields.\"\nHTTP/1.1 400 \"Website address is not valid.\"\nHTTP/1.1 409 \"Subscriber already exists.\"\nHTTP/1.1 409 \"Custom Domain already exists.\"\nHTTP/1.1 500 \"Failure to create client signup.\"",
          "type": "json"
        }
      ]
    },
    "filename": "/var/www/api/1.8.0/classes/apiPartners.php",
    "groupTitle": "Partners"
  },
  {
    "type": "put",
    "url": "/partners/subscriber",
    "title": "subscriber PUT",
    "version": "1.7.0",
    "name": "putSubscriber",
    "group": "Partners",
    "description": "<p>Create IDX subscriber.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request: PHP",
        "content": "$url = 'https://api.idxbroker.com/partners/subscriber';\n\n// Note: To get list of required or optional fields, simply make a request with nothing in the body.\n// Make sure all required fields are passed in the request body.\n// Example:\n$data = [\n    'product'               => 'lite',\n    'firstName'             => 'Test',\n    'lastName'              => 'Test',\n    'companyName'           => 'Test Company',\n    'address'               => '1000 E Test street',\n    'city'                  => 'Eugene',\n    'state'                 => 'OR', // Use XX for international.\n    'zipcode'               => 97402,\n    'primaryPhone'          => '5555555555',\n    'email'                 => 'test@gmail.com',\n    'website'               => 'http://example.com',\n    'mlsIDList'             => 'a001,a002',\n    'agreeToTermsOfService' => 'yes'\n];\n$data = http_build_query($data); // Encode and & delineate.",
        "type": "php"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  },
  {
    "type": "put",
    "url": "/partners/subscriber",
    "title": "subscriber PUT",
    "version": "1.6.0",
    "name": "putSubscriber",
    "group": "Partners",
    "description": "<p>Create IDX subscriber.<br /><br /></p>",
    "examples": [
      {
        "title": "Example Request: PHP",
        "content": "$url = 'https://api.idxbroker.com/partners/subscriber';\n\n// Note: To get list of required or optional fields, simply make a request with nothing in the body.\n// Make sure all required fields are passed in the request body.\n// Example:\n$data = [\n    'product'               => 'lite',\n    'firstName'             => 'Test',\n    'lastName'              => 'Test',\n    'companyName'           => 'Test Company',\n    'address'               => '1000 E Test street',\n    'city'                  => 'Eugene',\n    'state'                 => 'OR', // Use XX for international.\n    'zipcode'               => 97402,\n    'primaryPhone'          => '5555555555',\n    'email'                 => 'test@gmail.com',\n    'website'               => 'http://example.com',\n    'mlsIDList'             => 'a001,a002',\n    'agreeToTermsOfService' => 'yes'\n];\n$data = http_build_query($data); // Encode and & delineate.",
        "type": "php"
      }
    ],
    "filename": "/var/www/api/1.8.0/classes/_apidoc.js",
    "groupTitle": "Partners",
    "success": {
      "examples": [
        {
          "title": "Success-Response:",
          "content": "HTTP/1.1 204 OK",
          "type": "json"
        }
      ]
    }
  }
] });
